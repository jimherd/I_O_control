;
; Neopixel PIO routine
;
; Dataflow   Input FIFO --> OSR --> reg-X  
; Code       1-bit in reg-X is then tested for 0 or 1
;            if 0 output a short pulse
;            if 1 output a long pulse
;            repeat ad infinitum
;
; Relevant Neopixel waveform delays are 
;
; T1 = 0.35uS
; T2 = 0.55uS
; T3 = 0.35uS
; ZERO bit   = "1" for (T1),      '0' for (T2 + T3)
; ONE  bit   = "1" for (T1 + T2), '0' for (T3)
;

; Invert the following if invert circuit between pin out and 1st Neopixel

.define DATA_HIGH 1
.define DATA_LOW  0

.define public T1 2
.define public T2 5
.define public T3 3

;.lang_opt python sideset_init = pico.PIO.OUT_HIGH
;.lang_opt python out_init     = pico.PIO.OUT_HIGH
;.lang_opt python out_shiftdir = 1

; *********************

;===============================================================
; Version of code (Thanks to GrugHuhler)
;   1. 1st word transferred = number of bits of full NUM_PIXEL DMA transferred
;   2. Reset period at beginning and end of transfer
;       - Not needed on C code
;   3. DMA can be triggered at rate of Task_neopixel execution

; SPDX-License-Identifier: BSD-3-Clause

.program neopixel

//    set y, 31        ; Level converter inverts so start with a reset, i.e.
init_reset:          ; drive high (inverted to low) for a long time
    set pins, DATA_LOW [30] 
    jmp y-- init_reset

.wrap_target
    out y, 24        ; Read NUM_PIXELS*24 - 1 word from rp2040

bitloop:             ; bitloop outputs 24 bits for one LED (PIXEL)
    out x, 1
    jmp !x do_zero
do_one:              ; Output a "1" to LED (inverted for level converter)
    set pins, DATA_HIGH [4]
    jmp cont
do_zero:             ; Output a "0" to LED (inverted for level converter)
    set pins, DATA_HIGH [2] 
    set pins, DATA_LOW  [2]
cont:
    set pins, DATA_LOW
    jmp y-- bitloop

    set y, 20        ; NUM_PIXELS*24 bits complete; do a "reset" of just over (y+1)*4 uSec
do_reset:
    set pins, DATA_LOW [30] ; "0" but inverted for level converter
    jmp y-- do_reset
.wrap

% c-sdk {

#include "hardware/clocks.h"

static inline void neopixel_program_init(PIO pio, uint sm, uint offset, uint pin, float freq, uint bits)
{
    pio_sm_config c = neopixel_program_get_default_config(offset);

    // Set pin to be part of set output group, i.e. set by set instruction
    sm_config_set_set_pins(&c, pin, 1);

    // Attach pio to the GPIO
    pio_gpio_init(pio, pin);

    // Set pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    // Set pio clock to 8MHz, giving 10 cycles per LED binary digit
    float div = clock_get_hz(clk_sys) / 8000000.0;
    sm_config_set_clkdiv(&c, div);

    // Give all the FIFO space to TX (not using RX)
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    // Shift to the left, use autopull, next pull threshold 24 bits
    sm_config_set_out_shift(&c, false, true, 24);

    // Set sticky-- continue to drive value from last set/out.  Other stuff off.
    sm_config_set_out_special(&c, true, false, false);

    // Load configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    
    // enable this pio state machine
    pio_sm_set_enabled(pio, sm, true);
}
%}

